import asyncio
from datetime import datetime, timedelta

from aiogram import Bot
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from amplitude import BaseEvent
from loguru import logger
from openai.error import APIConnectionError, RateLimitError, Timeout, APIError, ServiceUnavailableError, \
    InvalidRequestError
from telebot import TeleBot, types

from admin_panel.telebot.models import Client
from tgbot.keyboards.inline import chat_kb, arrange_subscribe_kb
from tgbot.models.db_commands import get_close_dialog_user, create_dialog, get_user_disabled, get_all_users


async def close_dialog(bot, storage):
    users = await get_close_dialog_user()
    for user in users:
        user.close_session = None
        user.save()
        user.dialog.all().delete()
        need_key = StorageKey(bot_id=bot.id, chat_id=user.telegram_id, user_id=user.telegram_id)
        need_context = FSMContext(bot=bot, storage=storage, key=need_key)
        await need_context.set_state(None)
        try:
            await bot.send_message(text='\n'.join([
                f'ü§ñ –í–∞—à –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ—Å–∫–æ–ª—å–∫—É –≤—ã –Ω–µ –ø—Ä–æ—è–≤–ª—è–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç.\n',
                f'–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∏–∂–µ üëá'
            ]),
                reply_markup=await chat_kb(),
                chat_id=user.telegram_id)
        except TelegramForbiddenError:
            pass


async def answer_chat_gpt(user, bot: TeleBot, openai, question):
    logger.info(f'–û—Ç–∫—Ä—ã–ª —Å–µ—Å—Å–∏—é –¥–ª—è [ID: {user.telegram_id}]')
    user = Client.objects.get(pk=user.pk)
    message = bot.send_message(chat_id=user.telegram_id, text="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—Ç–≤–µ—Ç....")
    dialogs = user.dialog.all()
    if len(dialogs) == 5:
        user.dialog.all().delete()
        dialogs = []
    elif len(dialogs) == 4:
        bot.send_message(chat_id=user.telegram_id, text="‚ùóÔ∏è–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç –≤ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ "
                                                        "—Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –¥–∏–∞–ª–æ–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏, —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å "
                                                        "–±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –Ω–æ–≤—ã–π")
    messages = []
    for dialog in dialogs:
        messages.append({"role": "user", "content": dialog.question})
        messages.append({"role": "assistant", "content": dialog.answer})
    messages.append({"role": "user", "content": question})
    model = "gpt-3.5-turbo"
    try:
        completion = openai.ChatCompletion.create(
            model=model,
            messages=messages
        )
        response = completion.choices[0].message.content
    except (APIConnectionError, RateLimitError):
        return bot.edit_message_text(chat_id=user.telegram_id,
                                     text="üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ",
                                     message_id=message.message_id)
    except (APIError, ServiceUnavailableError, Timeout):
        return bot.edit_message_text(chat_id=user.telegram_id,
                                     text="üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ–∑–∂–µ",
                                     message_id=message.message_id)
    except InvalidRequestError:
        user.dialog.all().delete()
        return bot.edit_message_text(chat_id=user.telegram_id,
                                     text="üö´ –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏, –æ–±–Ω–æ–≤–∏—Ç–µ —Å–µ—Å—Å–∏—é üëá",
                                     message_id=message.message_id, reply_markup=answer_kb())
    except Exception as e:
        logger.error(f'{type(e).__name__}: {e}')
    try:
        bot.edit_message_text(chat_id=user.telegram_id, text="‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤",
                              message_id=message.message_id)
        user.use_tokens += completion.usage.total_tokens
        if not user.subscribe:
            token_limits = user.token_limits
            if token_limits - completion.usage.total_tokens < 0:
                user.token_limits = 0
            else:
                user.token_limits -= completion.usage.total_tokens
        close_session_time = datetime.now() + timedelta(minutes=5)
        user.close_session = close_session_time
        user.save()
        parts = [response[i:i + 4096] for i in range(0, len(response), 4096)]
        for part in parts:
            bot.send_message(chat_id=user.telegram_id, text=part, reply_markup=answer_kb())
        await create_dialog(user, question, response)
    except Exception as e:
        logger.error(f'{type(e).__name__}: {e}')
    logger.info(f'–ó–∞–∫—Ä—ã–ª —Å–µ—Å—Å–∏—é –¥–ª—è [ID: {user.telegram_id}]')


async def unsubscribe_user(bot: Bot):
    users = await get_user_disabled()
    for user in users:
        try:
            await bot.send_message(chat_id=user.telegram_id, text='\n'.join([
                f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å',
                f'–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n',
                f'–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá',
            ]), reply_markup=await arrange_subscribe_kb())
        except TelegramForbiddenError:
            logger.info(
                f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [ID: {user.telegram_id}], –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞')
        user.end_subscribe = None
        user.subscribe = False
        user.save()
        logger.info(
            f'–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username} [ID: {user.telegram_id}] –±—ã–ª–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏')


def answer_kb():
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="refresh_session")
    markup.add(button1)
    return markup


async def analytics(event, amplitude, user_id, username):
    amplitude.track(
        BaseEvent(
            event_type=event,
            user_id=str(user_id),
            device_id=username,
            event_properties={
                "source": "notification"
            }
        )
    )


async def mailing(bot: Bot, text, file_id, media_type):
    users = await get_all_users()
    send_count = 0
    for user in users:
        try:
            if media_type == "no_media":
                await bot.send_message(text=text, chat_id=user.telegram_id)
            elif media_type == "photo":
                await bot.send_photo(caption=text, chat_id=user.telegram_id, photo=file_id)
            elif media_type == "video":
                await bot.send_video(caption=text, chat_id=user.telegram_id, video=file_id)
            elif media_type == "document":
                await bot.send_document(caption=text, chat_id=user.telegram_id, document=file_id)
            send_count += 1
        except (TelegramForbiddenError, TelegramBadRequest):
            continue

        await asyncio.sleep(0.1)
    return send_count




class CreatedModel(models.Model):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞—è –º–æ–¥–µ–ª—å. –î–æ–±–∞–≤–ª—è–µ—Ç –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è."""
    created = models.DateTimeField(
        '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
        auto_now_add=True
    )
    updated = models.DateTimeField(
        auto_now=True,
        verbose_name="–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è")

    class Meta:
        abstract = True


class Client(CreatedModel):
    username = models.CharField(
        max_length=50,
        help_text='–Æ–∑–µ—Ä–Ω–µ–π–º –∫–ª–∏–µ–Ω—Ç–∞',
        verbose_name='–Æ–∑–µ—Ä–Ω–µ–π–º',
        blank=True,
        null=True
    )
    telegram_id = models.BigIntegerField(
        help_text='Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        verbose_name='Telegram ID'
    )
    close_session = models.DateTimeField(
        blank=True,
        null=True
    )
    token_limits = models.IntegerField(
        default=6000,
        help_text='–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏',
        verbose_name='–õ–∏–º–∏—Ç'
    )
    subscribe = models.BooleanField(
        default=False,
        help_text='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞',
        verbose_name='–ü–æ–¥–ø–∏—Å–∫–∞'
    )
    use_tokens = models.IntegerField(
        default=0,
        help_text='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤',
        verbose_name='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤'
    )
    end_subscribe = models.DateTimeField(
        blank=True,
        null=True,
        help_text='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏',
        verbose_name='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏'
    )

    class Meta:
        verbose_name = '–ö–ª–∏–µ–Ω—Ç—ã —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞'
        verbose_name_plural = '–ö–ª–∏–µ–Ω—Ç—ã —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞'
        ordering = ('-created',)

    def __str__(self):
        return self.username


class Dialog(CreatedModel):
    question = models.CharField(
        max_length=8000,
        verbose_name='–í–æ–ø—Ä–æ—Å',
        help_text='–í–æ–ø—Ä–æ—Å'
    )
    answer = models.CharField(
        max_length=8000,
        verbose_name='–û—Ç–≤–µ—Ç',
        help_text='–û—Ç–≤–µ—Ç',
    )
    user = models.ForeignKey(
        Client,
        on_delete=models.CASCADE,
        related_name='dialog',
        help_text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª –¥–∏–∞–ª–æ–≥',
        verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    )

    class Meta:
        verbose_name = '–î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        verbose_name_plural = '–î–∏–∞–ª–æ–≥ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞'
        ordering = ('created',)


class Referral(models.Model):
    utm_code = models.CharField(
        max_length=100
    )
    count_click = models.IntegerField(
        default=0
    )

    def __str__(self):
        return self.utm_code


class UserReferral(models.Model):
    user = models.ForeignKey(
        Client,
        on_delete=models.CASCADE,
        related_name='referrals',
        help_text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≥–ª–∞—Å–∏–ª',
        verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    )
    invited = models.ForeignKey(
        Client,
        on_delete=models.SET_NULL,
        related_name='invited',
        blank=True,
        null=True,
        help_text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏',
        verbose_name='–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    )

    class Meta:
        verbose_name = '–†–µ—Ñ–µ—Ä–∞–ª—ã'
        verbose_name_plural = '–†–µ—Ñ–µ—Ä–∞–ª—ã'

    def __str__(self):
        return self.user

